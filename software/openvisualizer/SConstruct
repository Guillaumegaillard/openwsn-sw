# Copyright (c) 2010-2013, Regents of the University of California. 
# All rights reserved. 
#  
# Released under the BSD 3-Clause license as published at the link below.
# https://openwsn.atlassian.net/wiki/display/OW/License

import os
import subprocess
import SCons

#============================ banner ==========================================

banner  = [""]
banner += [" ___                 _ _ _  ___  _ _ "]
banner += ["| . | ___  ___ ._ _ | | | |/ __>| \ |"]
banner += ["| | || . \/ ._>| ' || | | |\__ \|   |"]
banner += ["`___'|  _/\___.|_|_||__/_/ <___/|_\_|"]
banner += ["     |_|                  openwsn.org"]
banner += [""]

print '\n'.join(banner)

#============================ SCons environment ===============================

#===== help text

Help('''
Usage:
    scons [options] <rungui|runcli|runweb>
    scons unittests
    scons docs
   
Targets:
    rungui/runcli/runweb:
          Run native GUI, command line interface, or web application,
          respectively, in build/openVisualizer directory.
          Must run as superuser/administrator.
           
          Options
          --sim         Run in simulator mode with default count of 
                        motes.
          --simCount=n  Run in simulator mode with 'n' motes.
          
          Web UI only
          --host=<address> Web server listens on IP address;
                           default 0.0.0.0 (all interfaces)
          --port=n         Web server listens on port number 'n';
                           default 8080
            
    docs: Generate source documentation in build{0}html directory
'''.format(os.sep))
# Help for trace option on next line. Removed from help because trace 
# implementation is not working.
#           --trace       Run yappi-based memory trace

AddOption('--sim',
    dest      = 'simOpt',
    default   = False,
    action    = 'store_true')
AddOption('--simCount',
    dest      = 'simCount',
    default   = 0,
    type      = 'int')
AddOption('--host',
    dest      = 'hostOpt',
    default   = '0.0.0.0',
    type      = 'string')
AddOption('--port',
    dest      = 'portOpt',
    default   = 8080,
    type      = 'int')
AddOption('--trace',
    dest      = 'traceOpt',
    default   = False,
    action    = 'store_true')

env = Environment(
    ENV       = {'PATH' : os.environ['PATH']},
    WORKDIR   = os.path.join('build', 'openVisualizer'),
    SIMOPT    = GetOption('simOpt'),
    SIMCOUNT  = GetOption('simCount'),
    TRACEOPT  = GetOption('traceOpt'),
    HOSTOPT   = GetOption('hostOpt'),
    PORTOPT   = GetOption('portOpt'),
)

def default(env,target,source): print SCons.Script.help_text
Default(env.Command('default', None, default))

#============================ SCons targets ===================================

#===== rungui, runcli, runweb

def uiRunner(target, source, env):
    '''
    Builder to run OpenVisualizerApp as subprocess in current directory.
    
    Target is never created; always runs Python app. Does not check if
    app is running already. Assumes current process already runs with the
    required superuser/administrator privileges.
    '''
    # Define module search path
    fwdir  = os.path.join('..','..','..','openwsn-fw')
    pypath = os.pathsep.join([
        os.path.join(fwdir,'firmware','openos','projects','common'),
        os.path.join('..'),                      # software
        os.path.join('..', 'openUI'),
        os.path.join('.'),                       # openvisualizer
        os.path.join('eventBus','PyDispatcher-2.0.3'),
    ])

    try:
        envpath = os.environ['PYTHONPATH']
        if envpath:
            pypath = pypath + os.pathsep + envpath
    except KeyError:
        pass

    subEnv               = os.environ.copy()
    subEnv['PYTHONPATH'] = pypath

    argList = [
        'python', str(source[0]), 
        '-d', env['WORKDIR'],
        '-f', fwdir
    ]
    if env['SIMCOUNT']:
        # Must append to list in a single item, without embedded quotes.
        argList.append('-n {0}'.format(env['SIMCOUNT']))
    elif env['SIMOPT']:
        argList.append('-s')
    
    if env['TRACEOPT']:
        argList.append('-t')
        
    if env['HOSTOPT']:
        argList.append('-H {0}'.format(env['HOSTOPT']))
    if env['PORTOPT']:
        argList.append('-p {0}'.format(env['PORTOPT']))
    
    result = 0
    try:
        p = subprocess.Popen(argList, env=subEnv)

        if env['WAIT_ON_UI']:
            # Must wait for CLI program that uses raw_input(); otherwise
            # SCons exits and standard input is sent to shell.
            result = p.wait()
        else:
            # Display PID to make it easier to kill if necessary.
            print 'Child PID is {0}'.format(p.pid)
    except:
        result = 1
        
    return result
    
def setupWorkFiles(env, workFiles):
    '''Copy application files to the working directory.'''
    for node in workFiles:
        appNode = os.path.join(env['WORKDIR'], node)
        
        Command(
            appNode, 
            os.path.join(env['SRC_APPDIR'], node),
            [
                Mkdir(env['WORKDIR']),
                Copy('$TARGET', '$SOURCE')
            ]
        )
    
def setupWorkDirs(env, webDirs):
    '''
    Copy application directories to the working directory. Ensure each
    directory is built with each execution, so directory contents are fresh.
    This automatic rebuilding is a convenience as we expect directory
    contents to change often.
    '''
    for node in webDirs:
        appNode = os.path.join(env['WORKDIR'], node)
        
        Command(
            appNode, 
            os.path.join(env['SRC_APPDIR'], node),
            [
                Delete('$TARGET'),
                Mkdir(env['WORKDIR']),
                Copy('$TARGET', '$SOURCE')
            ]
        )
        AlwaysBuild(appNode)
    
def setupUiRunner(env, uiFile, workDirs):
    '''
    Creates the builder to run an OpenVisualizer UI from the 
    OpenVisualizerApp directory. 
    
    Sets up dependencies on the contents of the app working directory.
    
    :param uiFile:   Filename to run in openVisualizerApp directory
    :param workDirs: Adds dependencies for the provided subdirs, too.
    :rtype:          The targets reference for the Builder.
    '''
    
    # Create Builder to run GUI    
    env.Append(BUILDERS = {'RunUi' : Builder(action = uiRunner)})
    
    targets = env.RunUi(os.path.join(env['SRC_APPDIR'], uiFile))
    
    for node in env['APPFILES']:
        appNode = os.path.join(env['WORKDIR'], node)
        Depends(targets, appNode)
        
    for node in workDirs:
        appNode = os.path.join(env['WORKDIR'], node)
        Depends(targets, appNode)
    
    return targets

# Setup builders for files and directories in app working directory.
# Do these steps once, then add dependencies for each type of UI in
# setupUiRunner().
env['SRC_APPDIR'] = os.path.join('bin', 'openVisualizerApp')
env['WAIT_ON_UI'] = False
env['APPFILES']   = ['logging.conf', 'trace.conf']
setupWorkFiles(env, env['APPFILES'])

Alias('rungui', setupUiRunner(env, 'openVisualizerGui.py', []))

cliEnv = env.Clone()
cliEnv['WAIT_ON_UI'] = True
Alias('runcli', setupUiRunner(cliEnv, 'openVisualizerCli.py', []))

webdirs = ['web_files']
setupWorkDirs(env, webdirs)
Alias('runweb', setupUiRunner(env, 'openVisualizerWeb.py', webdirs))

#===== unittest

# scan for SConscript contains unit tests
dirs = [
    'moteProbe',
    'openLbr',
    'RPL',
]
for d in dirs:
    SConscript(
        os.path.join(d, 'SConscript'),
        exports = {"env": env},
    )

Alias(
    'unittests',
    [
        'unittests_moteProbe',
        'unittests_openLbr',
        'unittests_RPL',
    ]
)

#===== docs
    
def setupDocs(env):
    '''
    Creates builder for Sphinx-based source documentation.
    
    Returns the targets reference for the Builder. Requires 
    'sphinx-build' executable on OS search path.
    '''
    htmlDir    = os.path.join('build', 'html')
    indexFile  = os.path.join('docs', 'index.rst')
    
    targets    = env.Command(
        htmlDir,
        indexFile,
        'sphinx-build -b html docs {0}'.format(htmlDir)
    )
    Clean(targets, htmlDir)
    AlwaysBuild(htmlDir)
        
    if 'docs' in BUILD_TARGETS:
        print "HTML docs generated in build{0}html directory.\n".format(os.sep)
        
    return targets

Alias('docs', setupDocs(env))
