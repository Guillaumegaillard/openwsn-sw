# Copyright (c) 2010-2013, Regents of the University of California. 
# All rights reserved. 
#  
# Released under the BSD 3-Clause license as published at the link below.
# https://openwsn.atlassian.net/wiki/display/OW/License

import os
import subprocess
import sys
import SCons

#============================ banner ==========================================

banner  = [""]
banner += [" ___                 _ _ _  ___  _ _ "]
banner += ["| . | ___  ___ ._ _ | | | |/ __>| \ |"]
banner += ["| | || . \/ ._>| ' || | | |\__ \|   |"]
banner += ["`___'|  _/\___.|_|_||__/_/ <___/|_\_|"]
banner += ["     |_|                  openwsn.org"]
banner += [""]

print '\n'.join(banner)

#============================ SCons environment ===============================

#===== help text

Help('''
Usage:
    scons [options] <rungui|runcli|runweb>
    scons <sdist|sdist-native>
    scons unittests
    scons docs
   
Targets:
    rungui/runcli/runweb:
          Run native GUI, command line interface, or web application,
          respectively, in build/runui directory.
          Must run as superuser/administrator.
           
          Options
          --sim         Run in simulator mode with default count of motes.
          --simCount=n  Run in simulator mode with 'n' motes.
          --ovdebug     Enable debug mode; more detailed logging
          
          Web UI only
          --host=<address> Web server listens on IP address;
                           default 0.0.0.0 (all interfaces)
          --port=n         Web server listens on port number 'n';
                           default 8080
                           
    copy-simfw:
          Copy files for the simulator, generated from an OpenWSN firmware 
          build on this host. Assumes firmware top-level directory is 
          '../../../openwsn-fw'.
            
    sdist: Generate a standard Python source distribution archive (for 
           setup.py) in build{0}dist directory. Installs data files to the 
           openvisualizer package directory.
    
    sdist-native:
          Linux only
          Generate a standard Python source distribution archive (for 
          setup.py) in build{0}dist directory. Installs to native directories 
          for the OS on which this command is run. This command *must* be 
          run on a Linux host to generate a Linux target archive. Installs 
          data files to /usr/local/share.
            
    docs: Generate source documentation in build{0}html directory
'''.format(os.sep))
# Help for trace option on next line. Removed from help because trace 
# implementation is not working.
#           --trace       Run yappi-based memory trace


# Define base environment
env = Environment(
    ENV = {'PATH' : os.environ['PATH']}
)
# Must define with absolute path since SCons construction may occur in a 
# subdirectory via SConscript.
env['ROOT_BUILD_DIR'] = os.path.join(os.getcwd(), 'build')

def default(env,target,source): 
    print SCons.Script.help_text
    
Default(env.Command('default', None, default))


# Define environment and options common to all run... targets
runnerEnv = env.Clone()

AddOption('--sim',
    dest      = 'simOpt',
    default   = False,
    action    = 'store_true')
runnerEnv['SIMOPT'] = GetOption('simOpt')

AddOption('--simCount',
    dest      = 'simCount',
    default   = 0,
    type      = 'int')
runnerEnv['SIMCOUNT'] = GetOption('simCount')

AddOption('--trace',
    dest      = 'traceOpt',
    default   = False,
    action    = 'store_true')
runnerEnv['TRACEOPT'] = GetOption('traceOpt')

AddOption('--ovdebug',
    dest      = 'debugOpt',
    default   = False,
    action    = 'store_true')
runnerEnv['DEBUGOPT'] = GetOption('debugOpt')


# These options are used only by the web runner. We define them here for
# simplicity, but they must be removed from non-web use in the runner 
# SConscript.
AddOption('--host',
    dest      = 'hostOpt',
    default   = '0.0.0.0',
    type      = 'string')
runnerEnv['HOSTOPT'] = GetOption('hostOpt')

AddOption('--port',
    dest      = 'portOpt',
    default   = 8080,
    type      = 'int')
runnerEnv['PORTOPT'] = GetOption('portOpt')

#============================ SCons targets ===================================

#===== rungui, runcli, runweb

appdir = os.path.join('bin', 'openVisualizerApp')

SConscript(
    os.path.join(appdir, 'SConscript'),
    exports = {"env": runnerEnv},
)

# Copy variables for data files out of runner environment, to be used in
# dist targets below.
env['CONF_FILES'] = runnerEnv['CONF_FILES']
env['DATA_DIRS']  = runnerEnv['DATA_DIRS']

#===== copy-simfw

def copySimfw(env):
    fwdir   = os.path.join('..', '..', '..', 'openwsn-fw')
    incdir  = os.path.join(fwdir, 'firmware','openos','bsp','boards','python')
    libdir  = os.path.join(fwdir, 'firmware','openos','projects','common')
    libext  = 'pyd' if sys.platform == 'win32' else 'so'
    datadir = os.path.join(appdir, 'sim_files')
    
    return env.Command('sim', '', 
                    [
                    Copy(datadir, os.path.join(incdir, 'openwsnmodule_obj.h')),
                    Copy(datadir, os.path.join(libdir, 'oos_openwsn.{0}'.format(libext))),
                    ])
                    
Alias('copy-simfw', copySimfw(env))

#===== sdist

def makeTreeSdist(env):
    '''
    Creates the source dist archive for a tree-based install. Uses a
    phony target to force build.
    
    First, copies thAde data files from the openVisualizerApp directory as 
    data for the openvisualizer package. Then creates the source dist 
    archive. Cleans up the temporary package data file.
    '''
    datadir = os.path.join('openvisualizer', 'data')
    appdir  = os.path.join('bin', 'openVisualizerApp')
    distdir = os.path.join('build', 'dist')
    cmdlist = []
    
    cmdlist.append(Delete(distdir))
    cmdlist.append(Delete('MANIFEST'))
    cmdlist.append(Delete(datadir))   # In case it didn't get deleted last time
    cmdlist.append(Copy('setup.py', 'treeSetup.py'))
    
    cmdlist.append(Mkdir(datadir))
    for conf in env['CONF_FILES']:
        cmdlist.append(Copy(os.path.join(datadir, conf), os.path.join(appdir, conf)))
    for data in env['DATA_DIRS']:
        cmdlist.append(Copy(os.path.join(datadir, data), os.path.join(appdir, data)))
    
    cmdlist.append(' '.join(['python setup.py sdist',
                            '--template MANIFEST.tree',
                            '--formats=gztar,zip',
                            '--dist-dir {0}'.format(distdir)]))
    cmdlist.append(Delete('setup.py'))
    cmdlist.append(Delete(datadir))
    
    return env.Command('tree', '', cmdlist)

Alias('sdist', makeTreeSdist(env))

#===== sdist-native

def makeNativeSdist(env):
    '''
    Creates the source dist archive for a OS-native install. Uses a
    phony target to force build.
    '''
    distdir = os.path.join('build', 'dist')
    
    return env.Command('native', '', 
                    [
                    Delete(distdir),
                    Delete('MANIFEST'),
                    Copy('setup.py', 'nativeSetup.py'),
                    'python setup.py sdist --dist-dir {0}'.format(distdir),
                    Delete('setup.py')
                    ])
                    
Alias('sdist-native', makeNativeSdist(env))

#===== unittest

# scan for SConscript contains unit tests
dirs = [
    os.path.join('openvisualizer', 'moteProbe'),
    os.path.join('openvisualizer', 'openLbr'),
    os.path.join('openvisualizer', 'RPL'),
]
for d in dirs:
    SConscript(
        os.path.join(d, 'SConscript'),
        exports = {"env": env},
    )

Alias(
    'unittests',
    [
        'unittests_moteProbe',
        'unittests_openLbr',
        'unittests_RPL',
    ]
)

#===== docs
    
SConscript(
    os.path.join('docs', 'SConscript'),
    exports = {"env": env},
)
