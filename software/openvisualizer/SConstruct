# Copyright (c) 2010-2013, Regents of the University of California. 
# All rights reserved. 
#  
# Released under the BSD 3-Clause license as published at the link below, 
# where both the copyright owner and organization are the Regents of the  
# University of California. 
# https://openwsn.atlassian.net/wiki/display/OW/License

import os
import subprocess
import SCons

#============================ banner ==========================================

banner  = [""]
banner += [" ___                 _ _ _  ___  _ _ "]
banner += ["| . | ___  ___ ._ _ | | | |/ __>| \ |"]
banner += ["| | || . \/ ._>| ' || | | |\__ \|   |"]
banner += ["`___'|  _/\___.|_|_||__/_/ <___/|_\_|"]
banner += ["     |_|                  openwsn.org"]
banner += [""]

print '\n'.join(banner)

#============================ SCons environment ===============================

#===== help text

Help('''
Usage:
    scons [--sim|--simCount=n] <rungui|runcli>
    scons unittests
    scons docs
   
Targets:
    rungui: Run OpenVisualizer GUI in build/openVisualizer directory.
    runcli: Run OpenVisualizer CLI in build/openVisualizer directory.
            Must run as superuser/administrator.
           
            --sim         Run in simulator mode with default count of 
                          motes.
            --simCount=n  Run in simulator mode with 'n' motes.
            
      docs: Generates source documentation in build{0}html directory
'''.format(os.sep))
# Help for trace option on next line. Removed from help because trace 
# implementation is not working.
#           --trace       Run yappi-based memory trace

AddOption('--sim',
    dest      = 'simopt',
    default   = False,
    action    = 'store_true')
AddOption('--simCount',
    dest      = 'simCount',
    default   = 0,
    type      = 'int')
AddOption('--trace',
    dest      = 'traceOpt',
    default   = False,
    action    = 'store_true')

env = Environment(
    ENV       = {'PATH' : os.environ['PATH']},
    APPDIR    = os.path.join('build', 'openVisualizer'),
    SIMOPT    = GetOption('simopt'),
    SIMCOUNT  = GetOption('simCount'),
    TRACEOPT  = GetOption('traceOpt'),
)

def default(env,target,source): print SCons.Script.help_text
Default(env.Command('default', None, default))

#============================ SCons targets ===================================

#===== rungui, runcli

def uiRunner(target, source, env):
    '''
    Builder to run OpenVisualizerApp as subprocess in current directory.
    
    Target is never created; always runs Python app. Does not check if
    app is running already. Assumes current process already runs with the
    required superuser/administrator privileges.
    '''
    # Define module search path
    fwdir  = os.path.join('..','..','..','openwsn-fw')
    pypath = os.pathsep.join([
        os.path.join(fwdir,'firmware','openos','projects','common'),
        os.path.join('..'),                      # software
        os.path.join('..', 'openUI'),
        os.path.join('.'),                       # openvisualizer
        os.path.join('eventBus','PyDispatcher-2.0.3'),
    ])

    try:
        envpath = os.environ['PYTHONPATH']
        if envpath:
            pypath = pypath + os.pathsep + envpath
    except KeyError:
        pass

    subEnv               = os.environ.copy()
    subEnv['PYTHONPATH'] = pypath

    argList = [
        'python', str(source[0]), 
        '-d', env['APPDIR'],
        '-f', fwdir
    ]
    if env['SIMCOUNT']:
        # Must append to list in a single item, without embedded quotes.
        argList.append('-n {0}'.format(env['SIMCOUNT']))
    elif env['SIMOPT']:
        argList.append('-s')
    
    if env['TRACEOPT']:
        argList.append('-t')
    
    result = 0
    try:
        p = subprocess.Popen(argList, env=subEnv)
        # Must wait for CLI program that uses raw_input(); otherwise
        # SCons exits and standard input is sent to shell. So for
        # simplicity, wait for all UI programs to exit.
        result = p.wait()
    except:
        result = 1
        
    return result
    
def setupUiRunner(env, uiFile):
    '''
    Creates the working directory and builder to run OpenVisualizerGui.
    
    :param uiFile: Filename to run in openVisualizerApp direcotry
    :rtype: the targets reference for the Builder.
    '''
    
    # Create Builder to run GUI    
    env.Append(BUILDERS = {'RunUi' : Builder(action = uiRunner)})
    
    srcDir  = os.path.join('bin', 'openVisualizerApp')
    targets = env.RunUi(os.path.join(srcDir, uiFile))
    
    # Copy conf files to working directory.
    for confFile in ['logging.conf', 'trace.conf']:
        appConf  = os.path.join(env['APPDIR'], confFile)

        env.Command(
            appConf, 
            os.path.join(srcDir, confFile),
            [
                Mkdir(env['APPDIR']),
                Copy('$TARGET', '$SOURCE')
            ])
        Depends(targets, appConf)
    
    return targets

Alias('rungui', setupUiRunner(env, 'openVisualizerGui.py'))
Alias('runcli', setupUiRunner(env, 'openVisualizerCli.py'))

#===== unittest

# scan for SConscript contains unit tests
dirs = [
    'moteProbe',
    'openLbr',
    'RPL',
]
for d in dirs:
    SConscript(
        os.path.join(d, 'SConscript'),
        exports = {"env": env},
    )

Alias(
    'unittests',
    [
        'unittests_moteProbe',
        'unittests_openLbr',
        'unittests_RPL',
    ]
)

#===== docs
    
def setupDocs(env):
    '''
    Creates builder for Sphinx-based source documentation.
    
    Returns the targets reference for the Builder. Requires 
    'sphinx-build' executable on OS search path.
    '''
    htmlDir    = os.path.join('build', 'html')
    indexFile  = os.path.join('docs', 'index.rst')
    
    targets    = env.Command(
        htmlDir,
        indexFile,
        'sphinx-build -b html docs {0}'.format(htmlDir)
    )
    Clean(targets, htmlDir)
    AlwaysBuild(htmlDir)
        
    if 'docs' in BUILD_TARGETS:
        print "HTML docs generated in build{0}html directory.\n".format(os.sep)
        
    return targets

Alias('docs', setupDocs(env))
